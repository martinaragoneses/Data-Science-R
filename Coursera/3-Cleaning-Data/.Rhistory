## Transform them to numeric
outcomes[,3]  = suppressWarnings(as.numeric(outcomes[,3]))
outcomes[,4]  = suppressWarnings(as.numeric(outcomes[,4]))
outcomes[,5]  = suppressWarnings(as.numeric(outcomes[,5]))
## Check that state and outcome are valid
if(!is.element(outcome, names(outcomes))) {
stop("invalid outcome")
## If they are, proceed with the analysis ( ++ taking out the NAs form the ranking)
} else {
if(outcome == "heart_attack") {
##c = 3
outcomes <- outcomes[order(outcomes$heart_attack, outcomes$name, na.last = NA), ]
} else if(outcome == "heart_failure") {
##c = 4
outcomes <- outcomes[order(outcomes$heart_failure, outcomes$name, na.last = NA), ]
} else{
##c= 5
outcomes <- outcomes[order(outcomes$pneumonia, outcomes$name, na.last = NA), ]
}
}
df <- data.frame(hospitals = character(0), states = character(0))
df$states <- as.factor(df$states)
hospitals = character(0)
for(s in sort(unique(outcomes$State))) {
out <- outcomes[outcomes$State == s, ]  ## We need all states now
if(num == "best") {
num = 1
print("BEST")
} else if(num == "worst") {
print("WORST")
num = nrow(out)
} else if(length(out$name) < num){
print("NA")
ans <- NA
} else {
print("GOOD")
ans <- out[num, 1]
}
ans <- out[num, 1]
hospitals <- c(hospitals, ans)
}
final <- data.frame(hospital = hospitals, state = sort(unique(outcomes$State)))
final <- final[order(final$state), ]
outcome = "heart attack"
num = 20
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character", header = TRUE)
## Keep only the variables we need for the analysis
outcomes <- outcomes[, c(2, 7, 11, 17, 23)]
## Rename them for convenience
colnames(outcomes) <- c("name", "State", "heart_attack", "heart_failure", "pneumonia")
outcome <- sub('\\ ', '_', outcome)
## Transform them to numeric
outcomes[,3]  = suppressWarnings(as.numeric(outcomes[,3]))
outcomes[,4]  = suppressWarnings(as.numeric(outcomes[,4]))
outcomes[,5]  = suppressWarnings(as.numeric(outcomes[,5]))
## Check that state and outcome are valid
if(!is.element(outcome, names(outcomes))) {
stop("invalid outcome")
## If they are, proceed with the analysis ( ++ taking out the NAs form the ranking)
} else {
if(outcome == "heart_attack") {
##c = 3
outcomes <- outcomes[order(outcomes$heart_attack, outcomes$name, na.last = NA), ]
} else if(outcome == "heart_failure") {
##c = 4
outcomes <- outcomes[order(outcomes$heart_failure, outcomes$name, na.last = NA), ]
} else{
##c= 5
outcomes <- outcomes[order(outcomes$pneumonia, outcomes$name, na.last = NA), ]
}
}
df <- data.frame(hospitals = character(0), states = character(0))
df$states <- as.factor(df$states)
hospitals = character(0)
for(s in sort(unique(outcomes$State))) {
out <- outcomes[outcomes$State == s, ]  ## We need all states now
if(num == "best") {
num = 1
print("BEST")
} else if(num == "worst") {
print("WORST")
num = nrow(out)
} else if(length(out$name) < num){
print("NA")
ans <- NA
} else {
print("GOOD")
ans <- out[num, 1]
}
ans <- out[num, 1]
hospitals <- c(hospitals, ans)
}
final <- data.frame(hospital = hospitals, state = sort(unique(outcomes$State)))
final <- final[order(final$state), ]
outcome = "heart failure"
#num =
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character", header = TRUE)
## Keep only the variables we need for the analysis
outcomes <- outcomes[, c(2, 7, 11, 17, 23)]
## Rename them for convenience
colnames(outcomes) <- c("name", "State", "heart_attack", "heart_failure", "pneumonia")
outcome <- sub('\\ ', '_', outcome)
## Transform them to numeric
outcomes[,3]  = suppressWarnings(as.numeric(outcomes[,3]))
outcomes[,4]  = suppressWarnings(as.numeric(outcomes[,4]))
outcomes[,5]  = suppressWarnings(as.numeric(outcomes[,5]))
## Check that state and outcome are valid
if(!is.element(outcome, names(outcomes))) {
stop("invalid outcome")
## If they are, proceed with the analysis ( ++ taking out the NAs form the ranking)
} else {
if(outcome == "heart_attack") {
##c = 3
outcomes <- outcomes[order(outcomes$heart_attack, outcomes$name, na.last = NA), ]
} else if(outcome == "heart_failure") {
##c = 4
outcomes <- outcomes[order(outcomes$heart_failure, outcomes$name, na.last = NA), ]
} else{
##c= 5
outcomes <- outcomes[order(outcomes$pneumonia, outcomes$name, na.last = NA), ]
}
}
df <- data.frame(hospitals = character(0), states = character(0))
df$states <- as.factor(df$states)
hospitals = character(0)
for(s in sort(unique(outcomes$State))) {
out <- outcomes[outcomes$State == s, ]  ## We need all states now
if(num == "best") {
num = 1
print("BEST")
} else if(num == "worst") {
print("WORST")
num = nrow(out)
} else if(length(out$name) < num){
print("NA")
ans <- NA
} else {
print("GOOD")
ans <- out[num, 1]
}
ans <- out[num, 1]
hospitals <- c(hospitals, ans)
}
final <- data.frame(hospital = hospitals, state = sort(unique(outcomes$State)))
final <- final[order(final$state), ]
head(final)
tail(final)
View(out)
outcome = "heart failure"
#num =
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character", header = TRUE)
## Keep only the variables we need for the analysis
outcomes <- outcomes[, c(2, 7, 11, 17, 23)]
## Rename them for convenience
colnames(outcomes) <- c("name", "State", "heart_attack", "heart_failure", "pneumonia")
outcome <- sub('\\ ', '_', outcome)
## Transform them to numeric
outcomes[,3]  = suppressWarnings(as.numeric(outcomes[,3]))
outcomes[,4]  = suppressWarnings(as.numeric(outcomes[,4]))
outcomes[,5]  = suppressWarnings(as.numeric(outcomes[,5]))
## Check that state and outcome are valid
if(!is.element(outcome, names(outcomes))) {
stop("invalid outcome")
## If they are, proceed with the analysis ( ++ taking out the NAs form the ranking)
} else {
if(outcome == "heart_attack") {
##c = 3
outcomes <- outcomes[order(outcomes$heart_attack, outcomes$name, na.last = NA), ]
} else if(outcome == "heart_failure") {
##c = 4
outcomes <- outcomes[order(outcomes$heart_failure, outcomes$name, na.last = NA), ]
} else{
##c= 5
outcomes <- outcomes[order(outcomes$pneumonia, outcomes$name, na.last = NA), ]
}
}
df <- data.frame(hospitals = character(0), states = character(0))
df$states <- as.factor(df$states)
hospitals = character(0)
for(s in sort(unique(outcomes$State))) {
out <- outcomes[outcomes$State == s, ]  ## We need all states now
if(num == "best") {
num = 1
print("BEST")
} else if(num == "worst") {
print("WORST")
num <- nrow(out)
} else if(length(out$name) < num){
print("NA")
ans <- NA
} else {
print("GOOD")
ans <- out[num, 1]
}
ans <- out[num, 1]
hospitals <- c(hospitals, ans)
}
final <- data.frame(hospital = hospitals, state = sort(unique(outcomes$State)))
final <- final[order(final$state), ]
outcome = "pneumonia"
num = "worst"
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character", header = TRUE)
## Keep only the variables we need for the analysis
outcomes <- outcomes[, c(2, 7, 11, 17, 23)]
## Rename them for convenience
colnames(outcomes) <- c("name", "State", "heart_attack", "heart_failure", "pneumonia")
outcome <- sub('\\ ', '_', outcome)
## Transform them to numeric
outcomes[,3]  = suppressWarnings(as.numeric(outcomes[,3]))
outcomes[,4]  = suppressWarnings(as.numeric(outcomes[,4]))
outcomes[,5]  = suppressWarnings(as.numeric(outcomes[,5]))
## Check that state and outcome are valid
if(!is.element(outcome, names(outcomes))) {
stop("invalid outcome")
## If they are, proceed with the analysis ( ++ taking out the NAs form the ranking)
} else {
if(outcome == "heart_attack") {
##c = 3
outcomes <- outcomes[order(outcomes$heart_attack, outcomes$name, na.last = NA), ]
} else if(outcome == "heart_failure") {
##c = 4
outcomes <- outcomes[order(outcomes$heart_failure, outcomes$name, na.last = NA), ]
} else{
##c= 5
outcomes <- outcomes[order(outcomes$pneumonia, outcomes$name, na.last = NA), ]
}
}
df <- data.frame(hospitals = character(0), states = character(0))
df$states <- as.factor(df$states)
hospitals = character(0)
for(s in sort(unique(outcomes$State))) {
out <- outcomes[outcomes$State == s, ]  ## We need all states now
if(num == "best") {
num = 1
print("BEST")
} else if(num == "worst") {
print("WORST")
num <- nrow(out)
} else if(length(out$name) < num){
print("NA")
ans <- NA
} else {
print("GOOD")
ans <- out[num, 1]
}
ans <- out[num, 1]
hospitals <- c(hospitals, ans)
}
final <- data.frame(hospital = hospitals, state = sort(unique(outcomes$State)))
final <- final[order(final$state), ]
tail(final)
View(out)
nrow(out)
out[num, 1]
View(out)
length(out$name)
out
out[-1]
out$name[-1]
out$name[nrow(out)]
out[nrow(out), 1]
nrow(out)
out[24]
outcome = "pneumonia"
num = "worst"
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character", header = TRUE)
## Keep only the variables we need for the analysis
outcomes <- outcomes[, c(2, 7, 11, 17, 23)]
## Rename them for convenience
colnames(outcomes) <- c("name", "State", "heart_attack", "heart_failure", "pneumonia")
outcome <- sub('\\ ', '_', outcome)
## Transform them to numeric
outcomes[,3]  = suppressWarnings(as.numeric(outcomes[,3]))
outcomes[,4]  = suppressWarnings(as.numeric(outcomes[,4]))
outcomes[,5]  = suppressWarnings(as.numeric(outcomes[,5]))
## Check that state and outcome are valid
if(!is.element(outcome, names(outcomes))) {
stop("invalid outcome")
## If they are, proceed with the analysis ( ++ taking out the NAs form the ranking)
} else {
if(outcome == "heart_attack") {
##c = 3
outcomes <- outcomes[order(outcomes$heart_attack, outcomes$name, na.last = NA), ]
} else if(outcome == "heart_failure") {
##c = 4
outcomes <- outcomes[order(outcomes$heart_failure, outcomes$name, na.last = NA), ]
} else{
##c= 5
outcomes <- outcomes[order(outcomes$pneumonia, outcomes$name, na.last = NA), ]
}
}
df <- data.frame(hospitals = character(0), states = character(0))
df$states <- as.factor(df$states)
hospitals = character(0)
for(s in sort(unique(outcomes$State))) {
out <- outcomes[outcomes$State == s, ]  ## We need all states now
if(num == "best") {
num = 1
print("BEST")
} else if(num == "worst") {
print("WORST")
num <- nrow(out)
} else if(length(out$name) < num){
print("NA")
ans <- NA
} else {
print("GOOD")
ans <- out[num, 1]
}
ans <- out[num, 1]
print(ans)
hospitals <- c(hospitals, ans)
}
final <- data.frame(hospital = hospitals, state = sort(unique(outcomes$State)))
final <- final[order(final$state), ]
re(list = ls())
rm(list = ls())
swirl()
swirl
library("swirl")
swirl()
str(download.file)
str(read.table)
ownersData
setwd("~/Desktop/data/github/Data-Science-R/Coursera/3-Cleaning-Data")
ownersData <- read.table("./data/cameras.csv", sep = ",", header = TRUE)
View(ownersData)
head(ownersData)
install.packages("xlsx")
install.packages("jsonlite")
traceback()
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
View(jsonData)
names(jsonData)
myjson <- toJSON(iris, pretty =TRUE)
View(ownersData)
cameraData2 <- read.xlsx("./data/cameras.csv", sheetIndex = 1, header = TRUE)
library(xlsx)
cameraData2 <- read.xlsx("./data/cameras.csv", sheetIndex = 1, header = TRUE)
library(data.table)
install.packages("data.table")
DT <- data.table(x = rnorm(9), y = rep(c("a, "b", "c"), each = 3), z = rnorm(9))
library("data.table")
DT <- data.table(x = rnorm(9), y = rep(c("a, "b", "c"), each = 3), z = rnorm(9))
traceback()
DT <- data.table(x = rnorm(9), y = rep(c("a", "b", "c"), each = 3), z = rnorm(9))
head(DT)
set.seed(1)
DT <- data.table(x = sample(letters[1:3], 1E5, TRUE))
DT[, .N, by = x]
set.seed(1)
DT <- data.table(x = sample(letters[1:3], 1E5, TRUE))
DT[, .N, by = x]
DT
set.seed(1)
DT <- data.table(x = sample(letters[1:3], 1E5, TRUE), y = rnorm(1E5))
DT[, .N, by = x]
DT
install.packages(RMySQL)
install.packages("RMySQL")
connection = url("https://scholar.google.es/citations?user=4nBtfo4AAAAJ&hl=en")
htmlCode = readLines(connection)
connection = url("https://scholar.google.es/citations?user=4nBtfo4AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
connection = url("https://scholar.google.es/citations?user=4nBtfo4AAAAJ&hl=en")
htmlCode = readLines(con)
con = url("https://scholar.google.es/citations?user=4nBtfo4AAAAJ&hl=en")
htmlCode = readLines(con)
con <- url("https://scholar.google.es/citations?user=4nBtfo4AAAAJ&hl=en")
htmlCode <- readLines(con)
con <- url("https://scholar.google.es/citations?user=4nBtfo4AAAAJ&hl=en")
htmlCode <- readLines(con)
con <- url("http://www.nytimes.com/2015/07/30/world/asia/mullah-omar-taliban-death-reports-prompt-inquiry-by-afghan-government.html?&hp&action=click&pgtype=Homepage&module=first-column-region&region=top-news&WT.nav=top-news&_r=0")
htmlCode <- readLines(con)
close(con)
con <- url("http://allafrica.com/view/group/main/main/id/00037797.html")
htmlCode <- readLines(con)
close(con)
close(con)
con <- url("http://allafrica.com/view/group/main/main/id/00037797.html")
htmlCode <- readLines(con)
close(con)
htmlCode
install.packages(httr)
install.packages("httr")
install.packages("httr")
library("httr")
getwd()
setwd(../)
setwd("../")
getwd()
setwd("./2-R-Programming")
getwd()
library("swirl")
swirl()
rm(list=ls())
swirl()
setwd("~/Desktop/data/github/Data-Science-R/Coursera/3-Cleaning-Data")
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
install.package("dplyr")
install.packages("dplyr")
install.packages("dplyr")
swirl()
library("swirl")
swirl()
cran <- tbl_df(mydf).
cran <- tbl_df(mydf)
View(mydf)
View(cran)
rem("mydf")
rm("mydf")
tbl_df
cran
?select
names(cran)
select(cran, ip_id, package, country)
5:20
names(cran)
select(r_arch:country)
select(cran, r_arch:country)
select(cran, r_arch:country:-1)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -X:size)
select(cran, -(X:size))
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size/2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, avg = mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_count, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99).
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
sbmit()
submit()
submit()
submit()
View(result3)
submit()
submit()
reset()
submit()
submit()
submit()
submit()
reset()
submit()
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size/2^20) %>%
print
submit()
skip()
submit()
submit()
submit()
submit()
library("tidyr")
install.packages("tydir")
updateR()
